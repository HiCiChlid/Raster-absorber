# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RasterabsorberDialog
                                 A QGIS plugin
 Add an new column for the vector layer through sampling values from a raster layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-31
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Zijian Guo, HK PolyU
        email                : zijian1.guo@connect.polyu.hk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtCore import QSize, Qt, QFile, QFileInfo, QVariant
from PyQt5.QtWidgets import QHeaderView, QTableWidget, QMessageBox, QLineEdit, QPushButton, QFileDialog, \
    QTableWidgetItem, QAbstractItemView, QComboBox, QTabWidget
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtGui import QIcon, QPixmap
import qgis.utils
from qgis import processing
from qgis.core import QgsVectorFileWriter

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'rasterabsorber_dialog_base.ui'))


class RasterabsorberDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RasterabsorberDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.outButton.clicked.connect(self.outFile)
        self.outButton_2.clicked.connect(self.outFile2)
        self.outButton_3.clicked.connect(self.outFile3)

    def run(self, method, parameters,output=True):
        processing_result = processing.run(method,parameters)
        if output:
            return processing_result['OUTPUT']
        else:
            return processing_result

    def outFile(self):  # by Carson Farmer 2008
        # display file dialog for output file
        self.outShape.clear()
        outName, _ = QFileDialog().getSaveFileName(self, self.tr("Input vector file"), ".",
                                                   self.tr(
                                                       "GeoPackages(*.gpkg);;Comma separated values (*.csv);;Shapefiles (*.shp)"),
                                                   options=QFileDialog.DontConfirmOverwrite)
        outPath = QFileInfo(outName).absoluteFilePath()
        if not outPath.upper().endswith('.GPKG') and not outPath.upper().endswith(
                '.CSV') and not outPath.upper().endswith('.SHP'):
            outPath += '.gpkg'
        if outName:
            self.outShape.clear()
            self.outShape.insert(outPath)


    def outFile2(self):  # by Carson Farmer 2008
        # display file dialog for output file
        self.outShape_2.clear()
        outName, _ = QFileDialog().getSaveFileName(self, self.tr("Input raster file"), ".",
                                                   self.tr(
                                                       "Raster file(*.tif)"),
                                                   options=QFileDialog.DontConfirmOverwrite)
        outPath = QFileInfo(outName).absoluteFilePath()
        if not outPath.upper().endswith('.TIF'):
            outPath += '.tif'
        if outName:
            self.outShape_2.clear()
            self.outShape_2.insert(outPath)
    def outFile3(self):  # by Carson Farmer 2008
        # display file dialog for output file
        self.outShape_3.clear()
        outName, _ = QFileDialog().getSaveFileName(self, self.tr("Output file"), ".",
                                                   self.tr(
                                                       "GeoPackages(*.gpkg);;Comma separated values (*.csv);;Shapefiles (*.shp)"),
                                                   options=QFileDialog.DontConfirmOverwrite)
        outPath = QFileInfo(outName).absoluteFilePath()
        if not outPath.upper().endswith('.GPKG') and not outPath.upper().endswith(
                '.CSV') and not outPath.upper().endswith('.SHP'):
            outPath += '.gpkg'
        if outName:
            self.outShape_3.clear()
            self.outShape_3.insert(outPath)
    def spatial_process(self, vector_layer,raster_layer,col_name,id_name):


        # 得到centroid

        parameter0 = {'ALL_PARTS': True,
         'INPUT': vector_layer,
         'OUTPUT': "memory:step1"}
        step1 = self.run("qgis:pointonsurface",parameter0)

        # 从raster中取值
        parameter1 = {'COLUMN_PREFIX': col_name,
         'INPUT': step1,
         'OUTPUT': "memory:step2",
         'RASTERCOPY': raster_layer}
        step2 = self.run("qgis:rastersampling", parameter1)

        parameter2 = {
            'INPUT': vector_layer,
            'FIELD': id_name,
            'INPUT_2': step2,
            'FIELD_2': id_name,
            'METHOD': 1,  # 1: 创建一个新的图层
            'PREFIX': '',
            'FIELDS_TO_COPY': '%s1'%col_name,
            'OUTPUT': "memory:step3"
        }
        step3 = self.run("qgis:joinattributestable", parameter2)

        return step3


    def accept(self): # Called when "OK" button pressed (based on the Carson Farmer's PointsInPoly Plugin, 2008)

        outPath_vector = self.outShape.text()
        outPath_raster = self.outShape_2.text()
        outPath_output = self.outShape_3.text()
        col_name=self.lineEdit_3.text()
        id_name = self.lineEdit_4.text()
        print(outPath_vector)
        print(outPath_raster)
        print(outPath_output)
        print(col_name)
        print(id_name)

        op_layer=self.spatial_process(outPath_vector, outPath_raster, col_name,id_name)
        parameters = {'INPUT': op_layer,
                      'OUTPUT': outPath_output}
        self.run('qgis:savefeatures', parameters)

        return